import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = '7786941832:AAHt5glecJPOkvNveniTb-Y_cy885SZwX1o'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

db_path = 'repairs.db'

class OrderForm(StatesGroup):
    client_name = State()
    client_phone = State()
    brand = State()
    model = State()
    repair_type = State()
    repair_price = State()
    prepayment = State()
    parts_cost = State()
    master_name = State()

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    buttons = [[KeyboardButton("üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")], [KeyboardButton("üîç –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")]]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def new_order(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    await OrderForm.client_name.set()

@dp.message_handler(state=OrderForm.client_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(client_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:")
    await OrderForm.next()

@dp.message_handler(state=OrderForm.client_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(client_phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    await OrderForm.next()

@dp.message_handler(state=OrderForm.brand)
async def process_brand(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    await OrderForm.next()

@dp.message_handler(state=OrderForm.model)
async def process_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Ä–µ–º–æ–Ω—Ç–∞:")
    await OrderForm.next()

@dp.message_handler(state=OrderForm.repair_type)
async def process_type(message: types.Message, state: FSMContext):
    await state.update_data(repair_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ä–µ–º–æ–Ω—Ç–∞:")
    await OrderForm.next()

@dp.message_handler(state=OrderForm.repair_price)
async def process_price(message: types.Message, state: FSMContext):
    await state.update_data(repair_price=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—Ç–æ–∫:")
    await OrderForm.next()

@dp.message_handler(state=OrderForm.prepayment)
async def process_prepayment(message: types.Message, state: FSMContext):
    await state.update_data(prepayment=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—á–∞—Å—Ç–µ–π:")
    await OrderForm.next()

@dp.message_handler(state=OrderForm.parts_cost)
async def process_parts(message: types.Message, state: FSMContext):
    await state.update_data(parts_cost=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–º–∞—Å—Ç–µ—Ä):")
    await OrderForm.next()

@dp.message_handler(state=OrderForm.master_name)
async def process_master(message: types.Message, state: FSMContext):
    data = await state.get_data()
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    balance_due = data['repair_price'] - data['prepayment']

    cursor.execute("""
        INSERT INTO repairs (
            status, repair_type, brand, model, repair_price, prepayment,
            balance_due, parts_cost, client_name, client_phone, master_name
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        "–í —Ä–∞–±–æ—Ç–µ", data['repair_type'], data['brand'], data['model'],
        data['repair_price'], data['prepayment'], balance_due, data['parts_cost'],
        data['client_name'], data['client_phone'], message.text
    ))
    conn.commit()
    conn.close()

    await message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish()

@dp.message_handler(lambda msg: msg.text == "üîç –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
async def check_status(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")

@dp.message_handler()
async def search_order(message: types.Message):
    phone = message.text
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT id, status, brand, model, repair_type, repair_price, prepayment, balance_due, parts_cost FROM repairs WHERE client_phone = ? ORDER BY created_at DESC LIMIT 1", (phone,))
    row = cursor.fetchone()
    conn.close()

    if row:
        reply = f"üì¶ –ó–∞–∫–∞–∑ #{row[0]}\n–°—Ç–∞—Ç—É—Å: {row[1]}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {row[2]} {row[3]}\n–†–µ–º–æ–Ω—Ç: {row[4]}\n–¶–µ–Ω–∞: {row[5]}‚ÇΩ\n–ó–∞–¥–∞—Ç–æ–∫: {row[6]}‚ÇΩ\n–û—Å—Ç–∞—Ç–æ–∫: {row[7]}‚ÇΩ\n–ó–∞–ø—á–∞—Å—Ç–∏: {row[8]}‚ÇΩ"
    else:
        reply = "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await message.answer(reply)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
